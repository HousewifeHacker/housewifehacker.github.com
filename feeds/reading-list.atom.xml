<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/reading-list.atom.xml" rel="self"></link><id>/</id><updated>2012-06-10T00:00:00Z</updated><entry><title>The Practice of Programming</title><link href="/the-practice-of-programming.html" rel="alternate"></link><updated>2012-06-10T00:00:00Z</updated><author><name></name></author><id>tag:,2012-06-10:the-practice-of-programming.html</id><summary type="html">&lt;p&gt;Disclaimer: This book does not have any python examples. But even before I began dabbling in C, I believe this book made me a better programmer. I recommend this book for the intermediate programmer who knows how to code, but may not be very good at coding with others. Someone who can write code that works, but their code is not pretty to look at later for debugging, learning, or changing code. Someone fresh out of college who needs to work on code with other developers for perhaps the first time. After reading this, I went back through all my old posts and changed spacing and naming (wasn't a big deal because I moved my blog to my new domain from blogger). I now run pep8 against my python code. My programs are easier to read and follow logically. My variables make sense and are easy to remember. I feel that I have surpassed one of the beginner hurdles to becoming a good developer.&lt;/p&gt;
&lt;p&gt;Get it on Amazon &lt;a class="reference external" href="http://www.amazon.com/gp/product/020161586X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=gypsyc-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=020161586X"&gt;here&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Structure and Interpretation of Computer Programs</title><link href="/structure-and-interpretation-of-computer-programs.html" rel="alternate"></link><updated>2012-03-10T00:00:00Z</updated><author><name></name></author><id>tag:,2012-03-10:structure-and-interpretation-of-computer-programs.html</id><summary type="html">&lt;p&gt;Probably the most popular, I mean cult inspiring, computer programming book of all time. This book created a movement circa the year 2000. All the major universities that prided themselves on producing technical talent adopted this textbook into their curriculum. It began as a Scheme and Intro to Programming course at MIT. Now, many passionate programmers own a copy to reread at their leisure. Although Scheme isn't very useful anymore, lessons from this book can be applied to other languages, including python. If you aren't infatuated with math and theorems, the least you should do is read the first chapter free at &lt;a class="reference external" href="http://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;http://mitpress.mit.edu/sicp/full-text/book/book.html&lt;/a&gt; . Actually, the whole book is available for free online. I still prefer physical books however. Unplugging a little each day is healthy. I recommend buying a copy to take to the park, or wherever. If you do love math, then you will love this book. At the very least, my physical copy is a great conversation starter among programmers. Guys don't expect a mom to be reading SICP I guess.&lt;/p&gt;
&lt;p&gt;My Amazon Affiliate Link: &lt;a class="reference external" href="http://www.amazon.com/gp/product/0070004846/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=gypsyc-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0070004846"&gt;SICP&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>